{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar bagTagFormat = {\n  // [length, offset]\n  leadingDigit: [1, 1],\n  airlineCode: [3, 4],\n  bagNumber: [6, 10]\n};\n\nvar isBagTag = function isBagTag(barCode) {\n  var exp = '/[0-9]+/';\n  var isNumberOnly = barCode.match(exp);\n  return isNumberOnly && barCode.length === 10;\n};\n\nmodule.exports = {\n  isBagTag: isBagTag,\n  parseBagTag: parseBagTag\n};\n\nfunction parseBagTag(barCode) {\n  var result = {\n    type: 'BagTag'\n  };\n  Object.keys(bagTagFormat).forEach(function (key) {\n    var _bagTagFormat$key = _slicedToArray(bagTagFormat[key], 2),\n        length = _bagTagFormat$key[0],\n        offset = _bagTagFormat$key[1];\n\n    var value = barCode.substring(offset - length, offset).trim();\n    result[key] = value;\n  });\n  return result;\n}","map":{"version":3,"sources":["/home/mint/ticket2calendar/node_modules/bcbp-parser/dist/bagTag.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","bagTagFormat","leadingDigit","airlineCode","bagNumber","isBagTag","barCode","exp","isNumberOnly","match","module","exports","parseBagTag","result","type","keys","forEach","key","_bagTagFormat$key","offset","substring","trim"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar bagTagFormat = {\n  // [length, offset]\n  leadingDigit: [1, 1],\n  airlineCode: [3, 4],\n  bagNumber: [6, 10]\n};\n\nvar isBagTag = function isBagTag(barCode) {\n  var exp = '/[0-9]+/';\n  var isNumberOnly = barCode.match(exp);\n  return isNumberOnly && barCode.length === 10;\n};\n\nmodule.exports = {\n  isBagTag: isBagTag,\n  parseBagTag: parseBagTag\n};\n\nfunction parseBagTag(barCode) {\n  var result = {\n    type: 'BagTag'\n  };\n  Object.keys(bagTagFormat).forEach(function (key) {\n    var _bagTagFormat$key = _slicedToArray(bagTagFormat[key], 2),\n        length = _bagTagFormat$key[0],\n        offset = _bagTagFormat$key[1];\n\n    var value = barCode.substring(offset - length, offset).trim();\n    result[key] = value;\n  });\n  return result;\n}"]},"metadata":{},"sourceType":"script"}