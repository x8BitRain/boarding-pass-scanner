{"ast":null,"code":"'use strict';\n\nvar _require = require('./dataset'),\n    BCBPStandard = _require.BCBPStandard,\n    paxStatusTypes = _require.paxStatusTypes,\n    paxDetailsTypes = _require.paxDetailsTypes,\n    sourceCheckinTypes = _require.sourceCheckinTypes,\n    sourceBPIssuer = _require.sourceBPIssuer,\n    documentTypes = _require.documentTypes,\n    documentVerificationTypes = _require.documentVerificationTypes,\n    classTypes = _require.classTypes;\n\nvar _require2 = require('./julian'),\n    getJulianDate = _require2.getJulianDate;\n\nvar _require3 = require('./utils'),\n    hexToDec = _require3.hexToDec;\n\nvar _require4 = require('./bagTag'),\n    isBagTag = _require4.isBagTag,\n    parseBagTag = _require4.parseBagTag;\n\nvar hasConditionalFields = function hasConditionalFields(barCode) {\n  return barCode.length - 64 > 0;\n};\n\nvar isValidBCBP = function isValidBCBP(barCode) {\n  var value = barCode.substring(0, 1).trim();\n  return value === 'M' && barCode.length > 58;\n};\n\nvar getCodeMessage = function getCodeMessage(code, dataset) {\n  try {\n    var key = typeof code === 'string' ? code.toUpperCase() : code;\n    return dataset[code] ? dataset[code] : code; // return {\n    //   code,\n    //   message: dataset[code],\n    // };\n  } catch (error) {\n    return dataset['error'];\n  }\n};\n\nmodule.exports = {\n  parseBCBP: parseBCBP\n};\n\nfunction parseBCBP(barCode) {\n  if (!barCode) return {\n    error: 'Not a valid BCBP.'\n  };\n  if (isBagTag(barCode)) return parseBagTag(barCode);\n  if (!isValidBCBP(barCode)) return {\n    error: 'Not a valid BCBP.'\n  };\n  var hasConditionalData = barCode.length - 64 > 0; // the max standard iata input length,\n\n  var maxStandardIata = 158;\n  var result = {\n    type: 'bcbp'\n  };\n\n  try {\n    Object.keys(BCBPStandard).forEach(function (key) {\n      var _BCBPStandard$key = BCBPStandard[key],\n          length = _BCBPStandard$key.length,\n          offset = _BCBPStandard$key.offset,\n          content = _BCBPStandard$key.content; // TODO: add security params parser\n\n      if (offset > maxStandardIata) return;\n      var value = barCode.substring(offset - length, offset).trim(); // console.log(`key: ${key} - value: ${value}`);\n\n      switch (key) {\n        case 'flight_date':\n          result[key] = getJulianDate(value);\n          return;\n\n        case 'compartment_code':\n          result[key] = getCodeMessage(value, classTypes);\n          return;\n\n        case 'passenger_status':\n          result[key] = getCodeMessage(value, paxStatusTypes);\n          return;\n        // Conditional block\n\n        case 'passenger_details':\n          result[key] = getCodeMessage(value, paxDetailsTypes);\n          return;\n\n        case 'source_checking':\n          result[key] = getCodeMessage(value, sourceCheckinTypes);\n          return;\n\n        case 'boarding_pass_issue':\n          result[key] = getCodeMessage(value, sourceBPIssuer);\n          return;\n\n        case 'date_pass_issue':\n          result[key] = getJulianDate(value);\n          return;\n\n        case 'document_type':\n          result[key] = getCodeMessage(value, documentTypes);\n          return;\n\n        case 'doc_verification':\n          result[key] = getCodeMessage(value, documentVerificationTypes);\n          return;\n\n        case 'baggage_allowance':\n          result[key] = value.length > 0 ? value : 0;\n          return;\n      }\n\n      result[key] = value;\n      return; // if (hasConditionalData) {}\n    });\n  } catch (error) {\n    console.error(error);\n    result.error = error.message;\n  }\n\n  return result;\n} // const getConditionalBlock = (barCode) => {\n//   const sizeBlock = 64;\n//   // BCBPStandard.conditionals_size;\n//   const block1 = hexToDec(barCode.substring(62, 64).trim());\n//   const block2 = hexToDec(block1 + sizeBlock, (block1 + sizeBlock) + 2);\n//   // const conditionalBlockLength = barCode.length - sizeBlock;\n//   const conditionalBlock = barCode.substring(barCode.length - 60 , 60);\n//   const conditionalBlock = barCode.substring(barCode.length - 60 , 60);\n//   // let value = barCode.substring(offset - length, offset).trim();\n// }","map":{"version":3,"sources":["/home/mint/ticket2calendar/node_modules/bcbp-parser/dist/bcbp.js"],"names":["_require","require","BCBPStandard","paxStatusTypes","paxDetailsTypes","sourceCheckinTypes","sourceBPIssuer","documentTypes","documentVerificationTypes","classTypes","_require2","getJulianDate","_require3","hexToDec","_require4","isBagTag","parseBagTag","hasConditionalFields","barCode","length","isValidBCBP","value","substring","trim","getCodeMessage","code","dataset","key","toUpperCase","error","module","exports","parseBCBP","hasConditionalData","maxStandardIata","result","type","Object","keys","forEach","_BCBPStandard$key","offset","content","console","message"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _require = require('./dataset'),\n    BCBPStandard = _require.BCBPStandard,\n    paxStatusTypes = _require.paxStatusTypes,\n    paxDetailsTypes = _require.paxDetailsTypes,\n    sourceCheckinTypes = _require.sourceCheckinTypes,\n    sourceBPIssuer = _require.sourceBPIssuer,\n    documentTypes = _require.documentTypes,\n    documentVerificationTypes = _require.documentVerificationTypes,\n    classTypes = _require.classTypes;\n\nvar _require2 = require('./julian'),\n    getJulianDate = _require2.getJulianDate;\n\nvar _require3 = require('./utils'),\n    hexToDec = _require3.hexToDec;\n\nvar _require4 = require('./bagTag'),\n    isBagTag = _require4.isBagTag,\n    parseBagTag = _require4.parseBagTag;\n\nvar hasConditionalFields = function hasConditionalFields(barCode) {\n  return barCode.length - 64 > 0;\n};\nvar isValidBCBP = function isValidBCBP(barCode) {\n  var value = barCode.substring(0, 1).trim();\n  return value === 'M' && barCode.length > 58;\n};\n\nvar getCodeMessage = function getCodeMessage(code, dataset) {\n  try {\n    var key = typeof code === 'string' ? code.toUpperCase() : code;\n    return dataset[code] ? dataset[code] : code;\n    // return {\n    //   code,\n    //   message: dataset[code],\n    // };\n  } catch (error) {\n    return dataset['error'];\n  }\n};\n\nmodule.exports = {\n  parseBCBP: parseBCBP\n};\n\nfunction parseBCBP(barCode) {\n  if (!barCode) return { error: 'Not a valid BCBP.' };\n  if (isBagTag(barCode)) return parseBagTag(barCode);\n  if (!isValidBCBP(barCode)) return { error: 'Not a valid BCBP.' };\n  var hasConditionalData = barCode.length - 64 > 0;\n  // the max standard iata input length,\n  var maxStandardIata = 158;\n  var result = {\n    type: 'bcbp'\n  };\n  try {\n    Object.keys(BCBPStandard).forEach(function (key) {\n      var _BCBPStandard$key = BCBPStandard[key],\n          length = _BCBPStandard$key.length,\n          offset = _BCBPStandard$key.offset,\n          content = _BCBPStandard$key.content;\n      // TODO: add security params parser\n\n      if (offset > maxStandardIata) return;\n      var value = barCode.substring(offset - length, offset).trim();\n      // console.log(`key: ${key} - value: ${value}`);\n\n      switch (key) {\n        case 'flight_date':\n          result[key] = getJulianDate(value);\n          return;\n        case 'compartment_code':\n          result[key] = getCodeMessage(value, classTypes);\n          return;\n        case 'passenger_status':\n          result[key] = getCodeMessage(value, paxStatusTypes);\n          return;\n        // Conditional block\n        case 'passenger_details':\n          result[key] = getCodeMessage(value, paxDetailsTypes);\n          return;\n        case 'source_checking':\n          result[key] = getCodeMessage(value, sourceCheckinTypes);\n          return;\n        case 'boarding_pass_issue':\n          result[key] = getCodeMessage(value, sourceBPIssuer);\n          return;\n        case 'date_pass_issue':\n          result[key] = getJulianDate(value);\n          return;\n        case 'document_type':\n          result[key] = getCodeMessage(value, documentTypes);\n          return;\n        case 'doc_verification':\n          result[key] = getCodeMessage(value, documentVerificationTypes);\n          return;\n        case 'baggage_allowance':\n          result[key] = value.length > 0 ? value : 0;\n          return;\n      }\n      result[key] = value;\n      return;\n      // if (hasConditionalData) {}\n    });\n  } catch (error) {\n    console.error(error);\n    result.error = error.message;\n  }\n  return result;\n}\n// const getConditionalBlock = (barCode) => {\n//   const sizeBlock = 64;\n//   // BCBPStandard.conditionals_size;\n//   const block1 = hexToDec(barCode.substring(62, 64).trim());\n//   const block2 = hexToDec(block1 + sizeBlock, (block1 + sizeBlock) + 2);\n//   // const conditionalBlockLength = barCode.length - sizeBlock;\n//   const conditionalBlock = barCode.substring(barCode.length - 60 , 60);\n//   const conditionalBlock = barCode.substring(barCode.length - 60 , 60);\n\n//   // let value = barCode.substring(offset - length, offset).trim();\n// }"]},"metadata":{},"sourceType":"script"}